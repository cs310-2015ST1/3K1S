response$results[[1]]$geometry$location
response$results[[1]]$geometry$location$lat
response$results[[1]]$geometry$location
class(response$results[[1]]$geometry$location)
response$results[[1]]$geometry$location[0]
response$results[[1]]$geometry$location$
store.data[i,4] = response$results[[1]]$geometry$location$lat
response$results[[1]]$geometry$location["lat"]
for (i in 1:nrow(store.data)) {
request_url = paste(google_api_address,
curlEscape(store.data$Address[1]), sep="")
print(request_url)
response = fromJSON(getURL(request_url))
store.data[i,4] = response$results[[1]]$geometry$location["lat"]
store.data[i,5] = response$results[[1]]$geometry$location["lng"]
Sys.sleep(0.3)
print(paste(store.data[i,4], store.data[i,5], sep=", "))
}
store.data[1,4]
store.data[1,3]
store.data[1,4]
store.data[1,5]
store.data <- read.csv("liquor/static/scrapped.csv")
store.data$lat <- 0
store.data$lon <- 0
request_url = paste(google_api_address,
curlEscape(store.data$Address[1]), sep="")
response = fromJSON(getURL(request_url))
print(response$results[[1]]$geometry$location["lat"])
store.data[1,5]
store.data[1,5] = response$results[[1]]$geometry$location["lat"]
for (i in 1:nrow(store.data)) {
request_url = paste(google_api_address,
curlEscape(store.data$Address[1]), sep="")
response = fromJSON(getURL(request_url))
store.data[i,5] = response$results[[1]]$geometry$location["lat"]
store.data[i,6] = response$results[[1]]$geometry$location["lng"]
Sys.sleep(0.3)
print(paste(store.data[i,5], store.data[i,6], sep=", "))
}
for (i in 1:nrow(store.data)) {
request_url = paste(google_api_address,
curlEscape(store.data$Address[i]), sep="")
response = fromJSON(getURL(request_url))
store.data[i,5] = response$results[[1]]$geometry$location["lat"]
store.data[i,6] = response$results[[1]]$geometry$location["lng"]
Sys.sleep(0.3)
print(paste(store.data[i,5], store.data[i,6], sep=", "))
}
for (i in 1:nrow(store.data)) {
request_url = paste(google_api_address,
curlEscape(store.data$Address[i]), sep="")
response = fromJSON(getURL(request_url))
store.data[i,5] = response$results[[1]]$geometry$location["lat"]
store.data[i,6] = response$results[[1]]$geometry$location["lng"]
Sys.sleep(0.3)
print(paste("........................ ", format(round(k/nrow(store.data) * 100, 2), nsmall = 2), "%", sep=""))
}
nrow(store.data)
for (i in 1:nrow(store.data)) {
request_url = paste(google_api_address,
curlEscape(store.data$Address[i]), sep="")
response = fromJSON(getURL(request_url))
store.data[i,5] = response$results[[1]]$geometry$location["lat"]
store.data[i,6] = response$results[[1]]$geometry$location["lng"]
Sys.sleep(0.3)
print(paste("........................ ", format(round(i/nrow(store.data) * 100, 2), nsmall = 2), "%", sep=""))
}
write.csv(store.data, "liquor/static/scrapped.csv")
store.data <- read.csv("liquor/static/scrapped.csv")
View(store.data)
View(store.data)
write.csv(store.data, "liquor/static/scrapped.csv", header = TRUE)
store.data <- read.csv("liquor/static/scrapped.csv")
View(store.data)
store.data <- read.csv("liquor/static/scrapped.csv", header = TRUE)
View(store.data)
store.data$X <- NULL
store.data$X.1 <- NULL
View(store.data)
write.csv(store.data, "liquor/static/scrapped.csv", row.names = FALSE)
store.data <- read.csv("liquor/static/scrapped.csv", header = TRUE)
View(store.data)
class(data.file) == class(store.data)
rm(list=ls())
library("XML")
setwd("~/git/3K1S")
trim <- function(str) gsub("^\\s+|\\s+$", "", str)
trim.spaces <- function(str) gsub("\\s+", " ", str)
trim.html.chars <- function(str) gsub("\\n\\t", " ", str)
store.data <- read.csv("liquor/static/scrapped.csv")
data.file <- read.csv("liquor/static/data.csv")
class(data.file) == class(store.data)
data.file$X <- NULL
write.csv(data.file, "liquor/static/data.csv", row.names = FALSE)
store.data <- read.csv("liquor/static/scrapped.csv")
data.file <- read.csv("liquor/static/data.csv")
class(data.file) == class(store.data)
data.file
data.file[data.file$type == "BC Liquor Store",]
data.file[data.file$type == "BC Liquor Store",]
nrow(data.file[data.file$type == "BC Liquor Store",])
nrow(data.file[data.file$type == "BC Liquor Store",]$lat)
nrow(store.data)
data.file[data.file$type == "BC Liquor Store",]
data.file[data.file$type == "BC Liquor Store",1]
data.file[data.file$type == "BC Liquor Store",]
class(data.file[data.file$type == "BC Liquor Store",])
data.file[data.file$type == "BC Liquor Store",][1,]
data.file[data.file$type == "BC Liquor Store",][10,]
data.file[data.file$type == "BC Liquor Store",][10,0]
data.file[data.file$type == "BC Liquor Store",][10,1]
data.file[data.file$type == "BC Liquor Store",][10,]
rownames(data.file[data.file$type == "BC Liquor Store",][10,])
as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][10,]))
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index = as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][10,]))
print(data.file.index)
}
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index = as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
print(data.file.index)
}
data.file[38,]
data.file[38,lat]
data.file[38,"lat"]
nrow(store.data)
data.file.index = as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][10,]))
data.file.lat = data.file[data.file.index,"lat"]
data.file.lon = data.file[data.file.index,"lon"]
data.file.lat
store.data
store.data$lat
class(store.data$lat)
store.data$lat
as.list(store.data$lat)
as.list(store.data$lat, store.data$lon)
as.list(store.data$lat, store.data$lon)
as.list(as.list(store.data$lat, store.data$lon))
as.list(paste(store.data$lat, store.data$lon, sep = ","))
as.list(paste(store.data$lat, store.data$lon, sep = ","))
store.data.latlon <- as.list(paste(store.data$lat, store.data$lon, sep = ","))
store.data.latlon
store.data.latlon
store.data.latlon[1]
lapply(store.data.latlon, function(x) strsplit(x, ","))
lapply(store.data.latlon, function(x) strsplit(x, ","))[1]
lapply(store.data.latlon, function(x) strsplit(x, ","))[1][1]
lapply(store.data.latlon, function(x) strsplit(x, ","))[1]
lapply(store.data.latlon, function(x) strsplit(x, ","))[3]
lapply(store.data.latlon, function(x) strsplit(x, ","))[4]
lapply(store.data.latlon, function(x) strsplit(x, ","))[4][1]
lapply(store.data.latlon, function(x) strsplit(x, ","))[4][1][1]
lapply(store.data.latlon, function(x) strsplit(x, ","))[4,1]
lapply(store.data.latlon, function(x) strsplit(x, ","))[4]
lapply(store.data.latlon, function(x) strsplit(x, ","))[4,1]
lapply(store.data.latlon, function(x) strsplit(x, ","))[[4]]
lapply(store.data.latlon, function(x) strsplit(x, ","))[[1]]
lapply(store.data.latlon, function(x) strsplit(x, ","))[[1]][1]
class(lapply(store.data.latlon, function(x) strsplit(x, ","))[[1]])
lapply(store.data.latlon, function(x) strsplit(x, ","))[[1]]
rm(store.data.latlon)
store.data$lat
haversine <- function(lat1, lat2, lon1, lon2) {
}
lapply(store.data, function(x) haversine(x$lat, data.file.lat, x$lon, data.file.lon))
distances <- lapply(store.data, function(x) haversine(x$lat, data.file.lat, x$lon, data.file.lon))
distances <- lapply(store.data, function(x) haversine(x$lat, data.file.lat, x$lon, data.file.lon)); distances
haversine <- function(lat1, lat2, lon1, lon2) {
1
}
distances <- lapply(store.data, function(x) haversine(x$lat, data.file.lat, x$lon, data.file.lon)); distances
haversine <- function(lat1, lat2, lon1, lon2) {
print(lat1)
}
distances <- lapply(store.data, function(x) haversine(x$lat, data.file.lat, x$lon, data.file.lon)); distances
store.data[1]
store.data[1,]
View(store.data)
distances <- lapply(store.data, function(x) haversine(x[4], data.file.lat, x[5], data.file.lon)); distances
distances
distances <- data.frame(lat1 = 0, lat2 = data.file.lat,
lon1 = 0, lon2 = data.file.lon)
View(distances)
distances <- data.frame(lat1 = 0, lat2 = data.file.lat,
lon1 = 0, lon2 = data.file.lon,
distance = 0)
distances <- data.frame(lat1 = numeric(100), lat2 = data.file.lat,
lon1 = 0, lon2 = data.file.lon,
distance = 0)
distances <- data.frame(lat1 = numeric(nrow(store.data)), lat2 = data.file.lat,
lon1 = 0, lon2 = data.file.lon,
distance = 0)
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
store.data[1,]
distances[, c("lat1", "lat2", "lon1", "lon2")]
distances[, c("lat1", "lat2", "lon1", "lon2")][1]
apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1, function(x) haversine(x["lat1"],
x["lat2"],
x["lon1"],
x["lon2"]))
class(apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1, function(x) haversine(x["lat1"],
x["lat2"],
x["lon1"],
x["lon2"])))
apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1, function(x) haversine(x["lat1"],
x["lat2"],
x["lon1"],
x["lon2"]))
apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) haversine(x["lat1"], x["lat2"], x["lon1"], x["lon2"]))
min(apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) haversine(x["lat1"], x["lat2"], x["lon1"], x["lon2"])))
apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) haversine(x["lat1"], x["lat2"], x["lon1"], x["lon2"]))
class(apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) haversine(x["lat1"], x["lat2"], x["lon1"], x["lon2"])))
apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) haversine(x["lat1"], x["lat2"], x["lon1"], x["lon2"]))
haversine <- function(lat1, lat2, lon1, lon2) {
}
apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) haversine(x["lat1"], x["lat2"], x["lon1"], x["lon2"]))
exp(3)
sin(1)
sin(1)*10^2
sin(1)*10
8.41471 * 8.41471
sin(1)*10
(sin(1)*10)^2
sin(1)^2*10
haversine <- function(lat1, lat2, lon1, lon2) {
R <- 6371 # Earth mean radius [km]
delta.long <- (long2 - long1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return(d) # Distance in km
}
haversine <- function(lat1, lat2, lon1, lon2) {
R <- 6371 #km (Earth radius)
lat.delta <- lat2 - lat1
lon.delta <- lon2 - lon1
a <- sin(lat.delta/2)^2 + cos(lat1) * cos(lat2) * sin(lon.delta/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return (d)
}
install.packages("geosphere")
rm(haversine)
library("geosphere")
apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lat1"], x["lat2"]), c(x["lon1"], x["lon2"])))
distances[, c("lat1", "lat2", "lon1", "lon2")]
apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
}
apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
class(apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"]))))
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
haver.dist
haver.dist[1]
min(haver.dist)
match(min(haver.dist), min(haver.dist))
match(min(haver.dist), haver.dist)
store.data.index <- match(min(haver.dist), haver.dist)
store.data.index
data.file[store.data.index,]
data.file[data.file.index,]
store.data[store.data.index,]
counter <- 0
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
if (min(haver.dist) == 0) {
counter = counter + 1
}
}
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
if (min(haver.dist) == 0) {
counter = counter + 1
} else {
print(min(haver.dist))
}
}
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
if (min(haver.dist) == 0) {
counter = counter + 1
} else {
print(min(haver.dist)>2000)
}
}
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
if (min(haver.dist) == 0) {
counter = counter + 1
} else {
if (min(haver.dist)>2000) {
print(store.data[store.data.index,])
print(data.file[data.file.index])
}
}
}
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
if (min(haver.dist) == 0) {
counter = counter + 1
} else {
if (min(haver.dist)>2000) {
print(store.data[store.data.index,])
print(data.file[data.file.index],)
}
}
}
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
if (min(haver.dist) == 0) {
counter = counter + 1
} else {
if (min(haver.dist)>5000) {
print(store.data[store.data.index,])
print(data.file[data.file.index,])
}
}
}
source('~/git/3K1S/scrap.R')
rm(list=ls())
library("XML")
library("geosphere")
setwd("~/git/3K1S")
trim <- function(str) gsub("^\\s+|\\s+$", "", str)
trim.spaces <- function(str) gsub("\\s+", " ", str)
trim.html.chars <- function(str) gsub("\\n\\t", " ", str)
store.data <- read.csv("liquor/static/scrapped.csv")
data.file <- read.csv("liquor/static/data.csv")
View(data.file)
View(store.data)
class(data.file) == class(store.data)
counter <- 0
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
if (min(haver.dist) == 0) {
counter = counter + 1
} else {
if (min(haver.dist)>5000) {
print(store.data[store.data.index,])
print(data.file[data.file.index,])
}
}
}
counter <- 0
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
if (min(haver.dist) == 0) {
counter = counter + 1
} else {
if (min(haver.dist)>5000) {
print(store.data[store.data.index,]$Address)
print(data.file[data.file.index,]$address)
}
}
}
data.file$hours <- ""
data.file$hours[1]
data.file$address[1]
# cross-match lat lons of two different datasets to determine their relationships
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
data.file$hours[data.file.index] <- store.data$Address[store.data.index]
}
store.data$Address[store.data.index]
class(data.file$hours[1])
class(store.data$Address[store.data.index])
store.data <- read.csv("liquor/static/scrapped.csv", stringsAsFactors = FALSE)
data.file <- read.csv("liquor/static/data.csv", stringsAsFactors = FALSE)
class(data.file) == class(store.data)
data.file$hours <- ""
class(data.file$hours[1])
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
data.file$hours[data.file.index] <- store.data$Address[store.data.index]
}
# cross-match lat lons of two different datasets to determine their relationships
for (i in 1:nrow(data.file[data.file$type == "BC Liquor Store",])) {
data.file.index <- as.numeric(rownames(data.file[data.file$type == "BC Liquor Store",][i,]))
data.file.lat <- data.file[data.file.index,"lat"]
data.file.lon <- data.file[data.file.index,"lon"]
distances <- data.frame(lat1 = store.data$lat, lat2 = data.file.lat,
lon1 = store.data$lon, lon2 = data.file.lon,
distance = 0)
haver.dist <- apply(distances[, c("lat1", "lat2", "lon1", "lon2")], 1,
function(x) distHaversine(c(x["lon1"], x["lat1"]), c(x["lon2"], x["lat2"])))
store.data.index <- match(min(haver.dist), haver.dist)
data.file$hours[data.file.index] <- store.data$Hours[store.data.index]
}
write.csv(data.file, "liquor/static/data_hours.csv", row.names = FALSE)
rm(list=ls())
data.file <- read.csv("liquor/static/data_hours.csv", stringsAsFactors = FALSE)
View(data.file)
data.file[data.file$type == "BC Liquor Store",]
nrow(data.file[data.file$type == "BC Liquor Store",])
table(data.file[data.file$type == "BC Liquor Store",])
(data.file[data.file$type == "BC Liquor Store",])
data.file[data.file$type == "BC Liquor Store",]$hours
length(data.file[data.file$type == "BC Liquor Store",]$hours)
nrow(data.file[data.file$type == "BC Liquor Store",]$hours)
data.file[data.file$type == "BC Liquor Store",]$hours
data.file[data.file$type == "BC Liquor Store",]$hours[1]
class(data.file[data.file$type == "BC Liquor Store",]$hours[1])
data.file[data.file$type == "BC Liquor Store",]$hours[1]
length(data.file[data.file$type == "BC Liquor Store",]$hours[1])
length(data.file[data.file$type == "BC Liquor Stor",]$hours[1])
length(data.file[data.file$type == "Private Liquor Store",]$hours[1])
nchar(data.file[data.file$type == "BC Liquor Store",]$hours[1])
nchar(data.file[data.file$type == "Private Liquor Store",]$hours[1])
class(data.file[data.file$type == "BC Liquor Store",]$hours)
data.file[data.file$type == "BC Liquor Store",]$hours
lapply(data.file[data.file$type == "BC Liquor Store",]$hours, function(x) nchar(x) == 176)
lapply(data.file[data.file$type == "BC Liquor Store",]$hours, function(x) nchar(x) > 0)
all(lapply(data.file[data.file$type == "BC Liquor Store",]$hours, function(x) nchar(x) > 0)) == TRUE)
all(lapply(data.file[data.file$type == "BC Liquor Store",]$hours, function(x) nchar(x) > 0) == TRUE)
all(lapply(data.file[data.file$type == "Private Liquor Store",]$hours, function(x) nchar(x) > 0) == TRUE)
all(lapply(data.file[data.file$type == "Private Liquor Store",]$hours, function(x) nchar(x) == 0) == TRUE)
all(lapply(data.file[data.file$type == "Proposed Store Location",]$hours, function(x) nchar(x) > 0) == TRUE)
all(lapply(data.file[data.file$type == "Proposed Store Location",]$hours, function(x) nchar(x) == 0) == TRUE)
